#!/usr/bin/env python3

import numpy as np
import matplotlib.pyplot as plt
import sys
import os
import pandas as pd
import argparse
import subprocess

def run_command(command):
    try:
        # Run the command, capture stdout and stderr as byte strings
        result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # Decode stdout and stderr from byte strings to UTF-8 strings
        stdout_str = result.stdout.decode('utf-8')
        stderr_str = result.stderr.decode('utf-8')
        
        # Return stdout, stderr, and return code
        return stdout_str, stderr_str, result.returncode
    
    except subprocess.CalledProcessError as e:
        # If the command returns a non-zero exit code, capture the stderr
        stderr_str = e.stderr.decode('utf-8')
        return '', stderr_str, e.returncode

def plot_residuals(case_path, lastPeriod, allTime):
    print(f"reading from {case_path}")

    postprocessing_path = os.path.join(case_path, "postProcessing")
    if not os.path.isdir(postprocessing_path):
        print("no postProcessing path")
        sys.exit(1)
    
    solverinfo_path = os.path.join(postprocessing_path,"solverInfo")
    if not os.path.isdir(solverinfo_path):
        print("no solverInfo path")
        sys.exit(1)

    if lastPeriod:
        setup_path = os.path.join(case_path, "setUp")
        if not os.path.exists(setup_path):
            print("no setUp file")
            sys.exit(1)
        
        os.chdir(case_path)
        command = 'foamDictionary -entry "rotorRPM" -value  setUp'
        stdout, stderr, return_code = run_command(command)
        rotor_RPM = float(stdout)
        time_period = 60/rotor_RPM
        print("reading setUp for rotor RPM")
        print(f"time period: {time_period}")
    

    dirs = os.listdir(solverinfo_path)
    for dir in dirs:
        dir = os.path.join(solverinfo_path, dir)
        print(f"reading dir: {dir}")
        files = os.listdir(dir)
        for file in files:
            file_path = os.path.join(dir, file)
            print(f"reading file: {file}")

            fig = plt.figure(num = file)
            fig.suptitle(file)

            data = pd.read_csv(file_path, sep='\t', skiprows=[0])
            clean_columns = data.columns.str.strip().str.replace('#', '').str.strip()
            data.columns = clean_columns

            if lastPeriod:
                print("plotting final period")
            elif allTime:
                print("plotting all time")



            for column in data.columns:
                if column == 'Time':
                    continue
                
                if not isinstance((data[column])[0], (int, float, complex)):
                    continue

                if lastPeriod:
                    last_time = (np.array(data['Time']))[-1]
                    indices = [i for i, x in enumerate(data['Time']) if last_time-time_period <= x]
                    plt.plot(np.array((data['Time'])[indices]), np.array((data[column])[indices]), label=column)
                else:
                    plt.plot(np.array(data['Time']), np.array(data[column]), label=column)
                
                print(f" -- plotting {column}")

                plt.yscale('log')
                plt.grid(True)
            plt.legend()






def main():
    parser = argparse.ArgumentParser(description='Plot residuals for a directory.')
    parser.add_argument('directory', nargs='?', default=os.getcwd(),
                        help='Optional directory path to plot residuals for (default: current directory)')
    parser.add_argument('-lastPeriod', action='store_true', help='Plot using last period')
    parser.add_argument('-allTime', action='store_true', help='Plot using all time')

    
    args = parser.parse_args()
    
    dir_path = os.path.abspath(args.directory)
    if not os.path.isdir(dir_path):
        print(f"Directory '{dir_path}' is not valid!")
        sys.exit(1)

    if args.lastPeriod and args.allTime:
        print("Error: Cannot use both -lastPeriod and -allTime flags together.")
        sys.exit(1)
    
    
    
    plot_residuals(dir_path, args.lastPeriod, args.allTime)
    plt.show()

if __name__ == "__main__":
    main()


