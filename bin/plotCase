#!/usr/bin/env python3
import argparse
import os


def main(dir=None, time_series_limits=[0,1000], plot_time_targets=[], verbose=True, show=True, save_path=None):
    import numpy as np
    import matplotlib.pyplot as plt
    import pyALMTree.plot

    if dir == None:
        dir = os.getcwd()

    if save_path == None:
        save_path = os.path.join(os.getcwd(), "caseFigures")
        if not os.path.exists(save_path):
            if verbose:
                print(f"making figure path")
            os.mkdir(save_path)

    if verbose:
        print(f"Working in {dir}")
        print(f"saving to {save_path}")

    # thrust
    pyALMTree.plot.turbineOutput.thrust(
        dir, save_path=save_path, time_series_limits=time_series_limits, verbose=verbose
    )
    pyALMTree.plot.turbineOutput.thrust_FFT(
        dir, save_path=save_path, time_series_limits=time_series_limits, verbose=verbose
    )
    pyALMTree.plot.turbineOutput.thrust_details(
        dir, save_path=save_path, time_series_limits=time_series_limits, verbose=verbose
    )
    pyALMTree.plot.turbineOutput.thrust_FFT_log_log(
        dir, save_path=save_path, time_series_limits=time_series_limits, verbose=verbose
    )
    
    # torque
    pyALMTree.plot.turbineOutput.torque(
        dir, save_path=save_path, time_series_limits=time_series_limits, verbose=verbose
    )
    pyALMTree.plot.turbineOutput.torque_FFT(
        dir, save_path=save_path, time_series_limits=time_series_limits, verbose=verbose
    )
    pyALMTree.plot.turbineOutput.torque_details(
        dir, save_path=save_path, time_series_limits=time_series_limits, verbose=verbose
    )
    pyALMTree.plot.turbineOutput.torque_FFT_log_log(
        dir, save_path=save_path, time_series_limits=time_series_limits, verbose=verbose
    )
    
    # angle of attack
    if len(plot_time_targets) != 0:
        pyALMTree.plot.turbineOutput.alphaC(
            dir, save_path=save_path, plot_time_targets=plot_time_targets, verbose=verbose
        )
        
        pyALMTree.plot.turbineOutput.VmagC(
            dir, save_path=save_path, plot_time_targets=plot_time_targets, verbose=verbose
        )
        
        pyALMTree.plot.turbineOutput.axialForce(
            dir, save_path=save_path, plot_time_targets=plot_time_targets, verbose=verbose
        )
        
        pyALMTree.plot.turbineOutput.tangentialForce(
            dir, save_path=save_path, plot_time_targets=plot_time_targets, verbose=verbose
        )
        
        pyALMTree.plot.turbineOutput.Cl(
            dir, save_path=save_path, plot_time_targets=plot_time_targets, verbose=verbose
        )
        
        pyALMTree.plot.turbineOutput.Cd(
            dir, save_path=save_path, plot_time_targets=plot_time_targets, verbose=verbose
        )

    if show:
        plt.show()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Process command-line arguments for a script."
    )

    parser.add_argument(
        "-s", "--show", action="store_true", help="Show the plots (default: False)"
    )
    parser.add_argument(
        "-q",
        "--quiet",
        action="store_true",
        help="Run the script in quiet mode (default: False)",
    )
    parser.add_argument(
        "-tLims",
        "--timeSeriesLimits",
        type=float,
        nargs='+',
        default=[0, 1000],
        help="Set the time limits for time series analysis (format: START STOP) (default: [0 1000])",
    )
    parser.add_argument(
        "-d",
        "--dir",
        type=str,
        default=None,
        help="Set the working directory (default: current working directory)",
    )
    parser.add_argument(
        "-o",
        "--outPath",
        type=str,
        default=None,
        help="Set the output directory (default: caseFigures in the current working directory)",
    )
    parser.add_argument(
        "-tTargets",
        "--plotTimeTargets",
        type=float,
        nargs='+',
        default=[],
        help="Sets the target analysis times for the instantaneous analysis (format: TARGET0 TARGET1 ...) (default: [])",
    )

    args = parser.parse_args()
    
    if len(args.timeSeriesLimits) != 2:
        raise argparse.ArgumentTypeError("Length of timeSeriesLimits must be 2.")
    
    main(
        show=args.show,
        time_series_limits=args.timeSeriesLimits,
        plot_time_targets=args.plotTimeTargets,
        verbose=not args.quiet,
        save_path=args.outPath,
        dir=args.dir,
    )
