#!/usr/bin/env python3

import os
import vtk
import sys
import re
import numpy as np

def check_same_lengths(arrays):
    # Check if all arrays have the same length
    return all(len(arr) == len(arrays[0]) for arr in arrays)

def create_2d_circle(center, radius, angle_to_x):
     # Create a disk (circle) source
    disk_source = vtk.vtkDiskSource()
    disk_source.SetInnerRadius(0)
    disk_source.SetOuterRadius(radius)
    disk_source.SetRadialResolution(50)
    disk_source.SetCircumferentialResolution(50)
    disk_source.Update()

    # Get the polydata of the disk
    disk_polydata = disk_source.GetOutput()
    
        # Set the orientation of the circle's normal along x-axis
    transform_orientation = vtk.vtkTransform()
    transform_orientation.RotateY(-90.0)  # Rotate around y-axis to orient normal along x-axis

    # Apply orientation transformation
    transform_filter_orientation = vtk.vtkTransformPolyDataFilter()
    transform_filter_orientation.SetTransform(transform_orientation)
    transform_filter_orientation.SetInputData(disk_polydata)
    transform_filter_orientation.Update()

    # Get oriented polydata
    oriented_polydata = transform_filter_orientation.GetOutput()

    # Rotate around z-axis
    rotation = vtk.vtkTransform()
    rotation.RotateZ(np.degrees(angle_to_x))

    # Apply rotation around z-axis
    transform_filter_rotation = vtk.vtkTransformPolyDataFilter()
    transform_filter_rotation.SetTransform(rotation)
    transform_filter_rotation.SetInputData(oriented_polydata)
    transform_filter_rotation.Update()

    # Transform to the desired center
    transform_translation = vtk.vtkTransform()
    transform_translation.Translate(center)

    transform_filter_translation = vtk.vtkTransformPolyDataFilter()
    transform_filter_translation.SetTransform(transform_translation)
    transform_filter_translation.SetInputData(transform_filter_rotation.GetOutput())
    transform_filter_translation.Update()

    return transform_filter_translation.GetOutput()

def read_data_from_dir(dir):
    const_dir = os.path.join(dir, "constant")
    if not os.path.isdir(const_dir):
        print("no constant dir")
        sys.exit(1)
    
    turbineArrayProperties = os.path.join(const_dir, "turbineArrayProperties")
    if not os.path.exists(turbineArrayProperties):
        print("no turbineArrayProperties")
        sys.exit(1)
    
    turbine_counter = 0
    turbine_type_arr = []
    turbine_base_arr = []
    turbine_dir_arr = []
    with open(turbineArrayProperties, 'r') as file:
        for line in file:
            while '/*' in line and '*/' not in line:
                next_line = next(file, '')
                line += next_line

            line = re.sub(r'//.*', '', line)

            line = re.sub(r'/\*.*?\*/', '', line, flags=re.DOTALL)
            turbine_counter += line.count("turbineType")
            matches = re.findall(r'turbineType\s+"([^"]*)"\s*;', line)
            turbine_type_arr.extend(matches)

            # note assumes that baseLocations comes after turbineType

            # now find the base location
            matches = re.findall(r'baseLocation\s*\(([^)]*)\)\s*;', line)
            turbine_base_arr.extend(matches)

            matches = re.findall(r'NacYaw\s+(-?\d+\.?\d*)\s*;', line)
            turbine_dir_arr.extend(matches)
                
    if not check_same_lengths([turbine_base_arr, turbine_type_arr, turbine_dir_arr]):
        print("turbine data arrays do not match in size")
        sys.exit(1)

    print("reading turbineArrayProperties: done")

    # now we go and look at the radius and hub height of the turbine types
    turbineProperties = os.path.join(const_dir, "turbineProperties")
    if not os.path.isdir(turbineProperties):
        print("no turbineProperties dir")
        sys.exit(1)
    

    turbine_radius_arr = []
    turbine_tower_height_arr = []
    for type in turbine_type_arr:
        turbine_type = os.path.join(turbineProperties, type)
        if not os.path.exists(turbine_type):
            print(f"no {type} file")
            sys.exit(1)

        with open(turbine_type, 'r') as file:
            found_TipRad = False
            found_TowerHeight = False
            for line in file:
                while '/*' in line and '*/' not in line:
                    next_line = next(file, '')
                    line += next_line

                line = re.sub(r'//.*', '', line)
                line = re.sub(r'/\*.*?\*/', '', line, flags=re.DOTALL)

                # Find TipRad and extract the number before ;
                matches = re.findall(r'TipRad\s+(-?\d+\.?\d*)\s*;', line)
                turbine_radius_arr.extend(matches)
                if matches:
                    found_TipRad = True

                # Find TowerHt and extract the number before ;
                matches = re.findall(r'TowerHt\s+(-?\d+\.?\d*)\s*;', line)
                turbine_tower_height_arr.extend(matches)
                if matches:
                    found_TowerHeight = True
        
        if (not found_TipRad):
            print(f"did not find TipRad in {turbine_type}")
            sys.exit(1)
        if (not found_TowerHeight):
            print(f"did not find TowerHeight in {turbine_type}")
            sys.exit(1)

    print("reading turbineProperties: done")

    return turbine_base_arr, turbine_dir_arr, turbine_radius_arr, turbine_tower_height_arr

def write_vtk(base_loc, direction, radius, tower_height):
    points = vtk.vtkPoints()
    file_name = "Rotors.vtk"
    
    # Create a vtkAppendPolyData to merge all circles into one
    append_filter = vtk.vtkAppendPolyData()

    for base, angle, rad, height in zip(base_loc, direction, radius, tower_height):
        # need to find the base location iin (x,y,z)
        # center = circle["center"] this needs to be changed to be tower height above the base location
        center = None # just for now

        base_split = base.split(" ")
        x = float(base_split[0])
        y = float(base_split[1])
        z = float(base_split[2])

        center = [x,y,z+float(height)]
        circle_polydata = create_2d_circle(center, float(rad), np.radians(float(angle)))
        append_filter.AddInputData(circle_polydata)


    append_filter.Update()

    # Write the polydata to the VTK file
    writer = vtk.vtkPolyDataWriter()
    writer.SetFileName(file_name)
    writer.SetInputData(append_filter.GetOutput())
    writer.Write()
    print("write: done")




def main():
    if len(sys.argv) == 1:
        dir_path = os.getcwd()
    elif len(sys.argv) == 2:
        test_dir = sys.argv[1]
        if os.path.isdir(test_dir):
            dir_path = os.path.abspath(test_dir)
        else:
            print(f"Directory {test_dir} is not valid!")
            sys.exit(1)
    else:
        print(f"Usage: createRotorVTK [<case dir>]")
        sys.exit(1)

    print(f"directory: {dir_path}")

    base_loc, direction, radius, tower_height = read_data_from_dir(dir=dir_path)
    print(f"writing VTK to {os.getcwd()}")
    write_vtk(base_loc, direction, radius, tower_height)


    
  


if __name__ == "__main__":
    main()